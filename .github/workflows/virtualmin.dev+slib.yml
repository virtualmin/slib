name: "virtualmin.dev: virtualmin/slib"

on:
  push:
    branches:
      - master
  release:
    types:
      - published
      - edited

env:
  IS_RELEASE: ${{ github.event_name == 'release' }}

  BUILD_DEPS: "curl"
  BUILD_BOOTSTRAP: "https://raw.githubusercontent.com/webmin/webmin-ci-cd/main/build/bootstrap.bash"

jobs:
  build-amd64:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[no-build]') }}
    env:
      TZ: Europe/Nicosia
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with: 
          packages: ${{ env.BUILD_DEPS }}
          version: 1.0

      - name: Fetch dependencies
        run: curl -O ${{ env.BUILD_BOOTSTRAP }}

      - name: Set timezone
        run: sudo timedatectl set-timezone ${{ env.TZ }}

      - name: Set version
        id: set_version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Upload file
        env:
          CLOUD__GPG_PH: ${{ secrets.DEV_GPG_PH }}
          CLOUD__IP_ADDR: ${{ secrets.DEV_IP_ADDR }}
          CLOUD__IP_KNOWN_HOSTS: ${{ secrets.DEV_IP_KNOWN_HOSTS }}
          CLOUD__UPLOAD_SSH_USER: ${{ secrets.DEV_UPLOAD_SSH_USER }}
          CLOUD__UPLOAD_SSH_DIR: ${{ env.IS_RELEASE == 'true' && secrets.PRERELEASE_UPLOAD_SSH_DIR || secrets.DEV_UPLOAD_SSH_DIR }}
          CLOUD__SSH_PRV_KEY: ${{ secrets.DEV_SSH_PRV_KEY }}
          CLOUD__SIGN_BUILD_REPOS_CMD: ${{ secrets.DEV_SIGN_BUILD_REPOS_CMD }}
          VERSION: ${{ env.VERSION }}
        run: |-

          set -euo pipefail

          # Check testing flag
          testing=$([[ "${{ env.IS_RELEASE }}" == "false" ]] && echo "--testing" || echo "")
          pkg_version="${{ env.VERSION }}"
          echo "pkg_version tag: $pkg_version"
          if [ "${{ env.IS_RELEASE }}" = "false" ]; then
            testing="--testing"
            testing_build_number=".$(date +%Y%m%d%H%M)"
            pkg_version=$(echo "$pkg_version" | cut -d. -f1,2)
            pkg_version="$pkg_version$testing_build_number"
            echo "pkg_version dev: $pkg_version"
          fi

          # Bootstrap build
          source bootstrap.bash "$testing"
          
          # Prepare build
          mv slib.sh slib-$pkg_version.sh

          # Upload and sign
          upload_list=("slib-$pkg_version.sh")
          delete_list=("$CLOUD_UPLOAD_SSH_DIR slib * [-_][0-9]*)
          cloud_upload upload_list delete_list
